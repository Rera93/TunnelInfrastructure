package TunnelSketch.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptTunnelDefinition = createDescriptorForTunnelDefinition();
  /*package*/ final EnumerationDescriptor myEnumerationTunnelLayouts = new EnumerationDescriptor_TunnelLayouts();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, "TunnelProjection");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTunnelDefinition);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.TunnelDefinition:
        return myConceptTunnelDefinition;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationTunnelLayouts);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForTunnelDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("TunnelSketch", "TunnelDefinition", 0xa181095ee04c42f1L, 0x9ea7b771b750f4d2L, 0x69804428d86cddb5L);
    b.class_(false, false, true);
    b.origin("r:42c0481e-3e0c-436e-9d1a-6c1630c3c226(TunnelSketch.structure)/7602151113221791157");
    b.version(2);
    b.property("type", 0x69804428d8724465L).type(MetaIdFactory.dataTypeId(0xa181095ee04c42f1L, 0x9ea7b771b750f4d2L, 0x69804428d8724460L)).origin("7602151113222145125").done();
    b.aggregate("layout", 0x6a06d92d55e650e0L).target(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x4799c809c7d0add2L).optional(false).ordered(true).multiple(false).origin("7640032606618538208").done();
    return b.create();
  }
}
