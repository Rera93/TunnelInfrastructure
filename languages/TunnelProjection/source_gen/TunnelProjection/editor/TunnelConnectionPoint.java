package TunnelProjection.editor;

/*Generated by MPS */

import de.itemis.mps.editor.diagram.runtime.shape.AbstractShape;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import de.itemis.mps.editor.diagram.runtime.shape.IShapeStyle;
import java.awt.Color;
import java.awt.Polygon;

public class TunnelConnectionPoint extends AbstractShape {

  private boolean isLeftPoint;
  private boolean isLeftToRightDirection;

  public TunnelConnectionPoint(boolean isLeftPoint, boolean isLeftToRightDirection) {
    this.isLeftPoint = isLeftPoint;
    this.isLeftToRightDirection = isLeftToRightDirection;
  }



  @Override
  protected void drawShadow(final Graphics2D graphics, final Rectangle2D bounds, IShapeStyle style) {
  }

  @Override
  protected void draw(final Graphics2D graphics, final Rectangle2D bounds, IShapeStyle style) {


    int minX = (int) bounds.getMinX();
    int maxX = (int) bounds.getMaxX();
    int minY = (int) bounds.getMinY();
    int maxY = (int) bounds.getMaxY();

    int width = maxX - minX;
    int height = maxY - minY;

    // Line's start and end point 
    int leftPointX = (int) bounds.getMinX();
    int leftPointY = (int) (bounds.getMaxY() + ((bounds.getMinY() - bounds.getMaxY()) / 2));
    int rightPointX = (int) bounds.getMaxX();
    int rightPointY = leftPointY;


    style.configureBorder(bounds);
    style.configureShadow(bounds);
    style.configureFill(bounds);

    graphics.setColor(Color.BLACK);

    Polygon rightSideTriangle = new Polygon(new int[]{((int) bounds.getCenterX()) + ((int) bounds.getWidth() / 2), ((int) bounds.getCenterX()) + ((int) bounds.getWidth() / 2) - 4, ((int) bounds.getCenterX()) + ((int) bounds.getWidth() / 2) - 4}, new int[]{(int) bounds.getCenterY(), ((int) bounds.getCenterY()) - 4, ((int) bounds.getCenterY()) + 4}, 3);

    Polygon leftSideTriangle = new Polygon(new int[]{((int) bounds.getCenterX()) - ((int) bounds.getWidth() / 2), ((int) bounds.getCenterX()) - ((int) bounds.getWidth() / 2) + 4, ((int) bounds.getCenterX()) - ((int) bounds.getWidth() / 2) + 4}, new int[]{(int) bounds.getCenterY(), ((int) bounds.getCenterY()) - 4, ((int) bounds.getCenterY()) + 4}, 3);

    if (!(this.isLeftPoint)) {
      graphics.drawOval((int) bounds.getCenterX() - width / 2, (int) bounds.getCenterY() - height / 2, width, height);
      graphics.drawLine(leftPointX, leftPointY, rightPointX, rightPointY);
      if (this.isLeftToRightDirection) {
        graphics.fillPolygon(rightSideTriangle);
      } else {
        graphics.fillPolygon(leftSideTriangle);
      }
    } else {
      graphics.fillOval((int) bounds.getCenterX() - width / 2, (int) bounds.getCenterY() - height / 2, width, height);
      graphics.setColor(Color.WHITE);
      graphics.drawLine(leftPointX, leftPointY, rightPointX, rightPointY);
      if (this.isLeftToRightDirection) {
        graphics.fillPolygon(rightSideTriangle);
      } else {
        graphics.fillPolygon(leftSideTriangle);
      }
    }


  }

}
