package TunnelProjection.editor;

/*Generated by MPS */

import de.itemis.mps.editor.diagram.runtime.shape.AbstractShape;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import de.itemis.mps.editor.diagram.runtime.shape.IShapeStyle;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.awt.Color;

public class Straight extends AbstractShape {

  private int length;
  private SEnumerationLiteral type;

  public Straight(int length, SEnumerationLiteral type) {
    this.length = length;
    this.type = type;
  }



  @Override
  protected void drawShadow(final Graphics2D graphics, final Rectangle2D bounds, IShapeStyle style) {
    if (this.type.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a468049550c0L, "TunnelProjection.structure.RoadType"), 0x1269a468049550c1L, "Bicycle"))) {
      graphics.setColor(new Color(108, 76, 81));
    } else if (this.type.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a468049550c0L, "TunnelProjection.structure.RoadType"), 0x1269a468049550c5L, "Car"))) {
      graphics.setColor(new Color(102, 102, 102));
    } else if (this.type.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a468049550c0L, "TunnelProjection.structure.RoadType"), 0x1269a468049550c9L, "Highway"))) {
      graphics.setColor(new Color(247, 212, 111));
    } else if (this.type.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a468049550c0L, "TunnelProjection.structure.RoadType"), 0x1269a468049550c2L, "Emergency"))) {
      graphics.setColor(new Color(1, 156, 65));
    } else {
      graphics.setColor(Color.RED);
    }
    graphics.fillRect((int) bounds.getMinX() - 3, (int) bounds.getMinY() - 3, (int) bounds.getWidth(), (int) bounds.getHeight());
  }

  @Override
  protected void draw(final Graphics2D graphics, final Rectangle2D bounds, IShapeStyle style) {

    graphics.setColor(Color.WHITE);


    int leftPointX = (int) bounds.getMinX();
    int leftPointY = (int) (bounds.getMaxY() + ((bounds.getMinY() - bounds.getMaxY()) / 2));
    int rightPointX = (int) bounds.getMaxX();
    int rightPointY = leftPointY;

    graphics.drawLine(leftPointX, leftPointY, rightPointX, rightPointY);



  }

}
