package TunnelProjection.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

/*package*/ class TunnelLayout_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public TunnelLayout_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_lqp3yl_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createCollection_1());
    editorCell.addEditorCell(createConstant_1());
    editorCell.addEditorCell(createDiagram_1());
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_lqp3yl_a0");
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createProperty_0());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Layout");
    editorCell.setCellId("Constant_lqp3yl_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_0() {
    getCellFactory().pushCellContext();
    try {
      final SProperty property = PROPS.name$tAp1;
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
      editorCell.setDefaultText("<no name>");
      editorCell.setCellId("property_name");
      editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
      setCellContext(editorCell);
      Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(AttributeOperations.getAttributeList(myNode, new IAttributeDescriptor.AllAttributes()), CONCEPTS.PropertyAttribute$jT);
      Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
        }
      });
      if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "*******************************************");
    editorCell.setCellId("Constant_lqp3yl_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, new Runnable() {
      public void run() {
        DiagramCreationContext.createDiagram(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            DiagramContext.withContext(node, new _FunctionTypes._return_P0_E0<BaseDiagramECell>() {
              public BaseDiagramECell invoke() {
                return editorCell.value;
              }
            }, new Runnable() {
              public void run() {
                ContextVariables.withValue("thisNode", node, new Runnable() {
                  public void run() {
                    final ContextVariables _variablesContext = ContextVariables.getCurrent();
                    IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
                      public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                        final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.tunnel$XEk2))) {
                          elements.addAll(accessorFactory.fromSNode(e));
                        }
                        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.outerTunnelRoads$Lh$z))) {
                          elements.addAll(accessorFactory.fromSNode(e));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.tunnelHoleRoads$TjOt);
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.leftPoints$jm9$);
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.rightPoints$jm8A);
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            List<SNode> pointToTunnelRoadConnections = new ArrayList<SNode>();
                            List<SNode> leftPoints = Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.leftPoints$jm9$)).toListSequence();
                            for (SNode leftPoint : ListSequence.fromList(leftPoints)) {
                              if ((SLinkOperations.getTarget(leftPoint, LINKS.tunnelRoadConnection$lMl5) != null)) {
                                ListSequence.fromList(pointToTunnelRoadConnections).addElement(SLinkOperations.getTarget(leftPoint, LINKS.tunnelRoadConnection$lMl5));
                              }
                            }
                            return pointToTunnelRoadConnections;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            // *** Tunnel Road to Right Point Connections *** 
                            List<SNode> tunnelRoadToRightPointConnections = new ArrayList<SNode>();
                            for (SNode tunnelRoad : Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.tunnelHoleRoads$TjOt))) {
                              if ((SLinkOperations.getTarget(tunnelRoad, LINKS.rightPointConnection$Ix1Y) != null)) {
                                ListSequence.fromList(tunnelRoadToRightPointConnections).addElement(SLinkOperations.getTarget(tunnelRoad, LINKS.rightPointConnection$Ix1Y));
                              }
                            }
                            return tunnelRoadToRightPointConnections;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            // *** Road to Road Connections *** 
                            List<SNode> roadConnections = new ArrayList<SNode>();

                            for (SNode road : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.outerTunnelRoads$Lh$z))) {
                              if ((SLinkOperations.getTarget(road, LINKS.roadConnection$1_Il) != null)) {
                                ListSequence.fromList(roadConnections).addElement(SLinkOperations.getTarget(road, LINKS.roadConnection$1_Il));
                              }
                            }
                            return roadConnections;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            // *** Tunnel Road to Tunnel Road Connection *** 
                            List<SNode> tunnelRoadConnections = new ArrayList<SNode>();
                            for (SNode tunnelRoad : Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.tunnelHoleRoads$TjOt))) {
                              if ((SLinkOperations.getTarget(tunnelRoad, LINKS.tunnelRoadConnection$IwPo) != null)) {
                                ListSequence.fromList(tunnelRoadConnections).addElement(SLinkOperations.getTarget(tunnelRoad, LINKS.tunnelRoadConnection$IwPo));
                              }
                            }
                            return tunnelRoadConnections;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            // *** Road to Left Point Connection *** 
                            List<SNode> roadToLeftPointConnections = new ArrayList<SNode>();

                            for (SNode road : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.outerTunnelRoads$Lh$z))) {
                              if ((SLinkOperations.getTarget(road, LINKS.leftPointConnection$uDEV) != null)) {
                                ListSequence.fromList(roadToLeftPointConnections).addElement(SLinkOperations.getTarget(road, LINKS.leftPointConnection$uDEV));
                              }
                            }
                            return roadToLeftPointConnections;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            // *** Right Point to Road Connection *** 
                            List<SNode> pointToRoadConnection = new ArrayList<SNode>();

                            for (SNode rightPoint : Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.tunnel$XEk2), LINKS.holes$OmIQ), LINKS.rightPoints$jm8A))) {
                              if ((SLinkOperations.getTarget(rightPoint, LINKS.roadConnection$Bbhk) != null)) {
                                ListSequence.fromList(pointToRoadConnection).addElement(SLinkOperations.getTarget(rightPoint, LINKS.roadConnection$Bbhk));
                              }
                            }
                            return pointToRoadConnection;
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        return elements;
                      }
                      @Override
                      public List<IConnectionType> getConnectionTypes() {
                        List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Point to Tunnel Road Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.LeftTunnelPoint$5I);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.TunnelRoad$J5);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode pointToTunnelRoadConnection = SLinkOperations.setNewChild(fromNode, LINKS.tunnelRoadConnection$lMl5, CONCEPTS.TunnelRoadReference$y_);
                              SLinkOperations.setTarget(pointToTunnelRoadConnection, LINKS.tunnelRoadReference$Jttw, toNode);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.LeftTunnelPoint$5I);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.TunnelRoad$J5);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x3a88284cfa2a2f2eL, "LeftPointToTunnelRoad"));
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Tunnel Road to Right Point Connection";
                          }
                          @Override
                          public boolean canCreate(final IConnectionEndpoint from, final IConnectionEndpoint to, final List<String> reasons) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.TunnelRoad$J5);
                            if (fromNode == null) {
                              return false;
                            }
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.RightTunnelPoint$$f);
                            if (toNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            return (SLinkOperations.getTarget(fromNode, LINKS.rightPointConnection$Ix1Y) == null);
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.TunnelRoad$J5);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.RightTunnelPoint$$f);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode tunnelRoadToRightPointConnection = SLinkOperations.setNewChild(fromNode, LINKS.rightPointConnection$Ix1Y, CONCEPTS.RightPointReference$56);
                              SLinkOperations.setTarget(tunnelRoadToRightPointConnection, LINKS.rightPointConnection$IrX0, toNode);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.TunnelRoad$J5);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.RightTunnelPoint$$f);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x3a88284cfa2a2f2fL, "TunnelRoadToRightPoint"));
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Road to Road Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Road$CO);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Road$CO);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode roadToRoadConnection = SLinkOperations.setNewChild(fromNode, LINKS.roadConnection$1_Il, CONCEPTS.RoadReference$mj);
                              SLinkOperations.setTarget(roadToRoadConnection, LINKS.roadReference$FS6w, toNode);
                              SPropertyOperations.set(toNode, PROPS.isConnected$uhEN, true);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Road$CO);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Road$CO);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x3a88284cfa2a2f32L, "RoadToRoad"));
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Tunnel Road to Tunnel Road Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.TunnelRoad$J5);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.TunnelRoad$J5);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode tunnelRoadToTunnelRoadConnection = SLinkOperations.setNewChild(fromNode, LINKS.tunnelRoadConnection$IwPo, CONCEPTS.TunnelRoadReference$y_);
                              SLinkOperations.setTarget(tunnelRoadToTunnelRoadConnection, LINKS.tunnelRoadReference$Jttw, toNode);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.TunnelRoad$J5);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.TunnelRoad$J5);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x1181c13235f24120L, "TunnelRoadToTunnelRoad"));
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Road to Point Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Road$CO);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.LeftTunnelPoint$5I);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode roadToPointConnection = SLinkOperations.setNewChild(fromNode, LINKS.leftPointConnection$uDEV, CONCEPTS.LeftPointReference$GL);
                              SLinkOperations.setTarget(roadToPointConnection, LINKS.leftPointConnect$Vlnw, toNode);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Road$CO);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.LeftTunnelPoint$5I);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x3a88284cfa2a2f36L, "RoadToLeftPoint"));
                          }
                        }));
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Right Tunnel Point to Road Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.RightTunnelPoint$$f);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Road$CO);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode pointToRoadConnection = SLinkOperations.setNewChild(fromNode, LINKS.roadConnection$Bbhk, CONCEPTS.RoadReference$mj);
                              SLinkOperations.setTarget(pointToRoadConnection, LINKS.roadReference$FS6w, toNode);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.RightTunnelPoint$$f);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return (SLinkOperations.getTarget(fromNode, LINKS.roadConnection$Bbhk) == null);
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Road$CO);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return !(SPropertyOperations.getBoolean(toNode, PROPS.isConnected$uhEN));
                          }
                          @Override
                          protected IShape getIconShape() {
                            return new EdgeIcon(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x3a88284cfa2a2f2dL, "TunnelProjection.structure.ConnectionType"), 0x3a88284cfa2a2f3bL, "RightPointToRoad"));
                          }
                        }));
                        return connectionTypes;
                      }
                    };

                    DiagramModel model = DiagramModel.getModel(editorContext, node, "5159374792462217178", accessor);

                    IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.outerTunnelRoads$Lh$z))), new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.tunnel$XEk2))));
                    model.setPaletteEntryProvider(paletteEntryProvider);

                    if (DiagramCreationContext.isSubdiagram()) {
                      editorCell.value = new SubDiagramECell(editorContext, node, model);
                    } else {
                      editorCell.value = new RootDiagramECell(editorContext, node, model);
                    }
                    editorCell.value.setCellId("Diagram_lqp3yl_c0");
                    if (editorCell.value.getContextGraph() != null) {
                      Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
                      if (defaultParent instanceof RootDCell) {
                        ((RootDCell) defaultParent).resetButtonConfig();
                      }
                    }
                  }
                });
              }
            });
          }
        });
      }
    });

    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty isConnected$uhEN = MetaAdapterFactory.getProperty(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804955038L, 0x2ba1f2d9f9637ce7L, "isConnected");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PropertyAttribute$jT = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
    /*package*/ static final SConcept LeftTunnelPoint$5I = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804bfb75aL, "TunnelProjection.structure.LeftTunnelPoint");
    /*package*/ static final SConcept TunnelRoad$J5 = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b0eb01L, "TunnelProjection.structure.TunnelRoad");
    /*package*/ static final SConcept TunnelRoadReference$y_ = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b5b1fbL, "TunnelProjection.structure.TunnelRoadReference");
    /*package*/ static final SConcept RightTunnelPoint$$f = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804bfb76fL, "TunnelProjection.structure.RightTunnelPoint");
    /*package*/ static final SConcept RightPointReference$56 = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1e674eba2c398dc1L, "TunnelProjection.structure.RightPointReference");
    /*package*/ static final SConcept Road$CO = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804955038L, "TunnelProjection.structure.Road");
    /*package*/ static final SConcept RoadReference$mj = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804c1fb06L, "TunnelProjection.structure.RoadReference");
    /*package*/ static final SConcept LeftPointReference$GL = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x13e8a493a7663348L, "TunnelProjection.structure.LeftPointReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink tunnel$XEk2 = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x4799c809c7d0add2L, 0x1269a46804c41f1aL, "tunnel");
    /*package*/ static final SContainmentLink outerTunnelRoads$Lh$z = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x4799c809c7d0add2L, 0x1269a4680495503bL, "outerTunnelRoads");
    /*package*/ static final SContainmentLink holes$OmIQ = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804bfb761L, 0x1e674eba2c62fc07L, "holes");
    /*package*/ static final SContainmentLink tunnelHoleRoads$TjOt = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804c14804L, 0x1e674eba2c637e5dL, "tunnelHoleRoads");
    /*package*/ static final SContainmentLink leftPoints$jm9$ = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804c14804L, 0x1269a46804c1480cL, "leftPoints");
    /*package*/ static final SContainmentLink rightPoints$jm8A = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804c14804L, 0x1269a46804c1480aL, "rightPoints");
    /*package*/ static final SContainmentLink tunnelRoadConnection$lMl5 = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804bfb75aL, 0x1269a46804bfb777L, "tunnelRoadConnection");
    /*package*/ static final SContainmentLink rightPointConnection$Ix1Y = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b0eb01L, 0x1181c13235b5b1feL, "rightPointConnection");
    /*package*/ static final SContainmentLink roadConnection$1_Il = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804955038L, 0x1e674eba2c5843a7L, "roadConnection");
    /*package*/ static final SContainmentLink tunnelRoadConnection$IwPo = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b0eb01L, 0x1181c13235b5b1f9L, "tunnelRoadConnection");
    /*package*/ static final SContainmentLink leftPointConnection$uDEV = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804955038L, 0x13e8a493a766334bL, "leftPointConnection");
    /*package*/ static final SContainmentLink roadConnection$Bbhk = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804bfb76fL, 0x13e8a493a771deebL, "roadConnection");
    /*package*/ static final SReferenceLink tunnelRoadReference$Jttw = MetaAdapterFactory.getReferenceLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b5b1fbL, 0x1181c13235b5b1fcL, "tunnelRoadReference");
    /*package*/ static final SReferenceLink rightPointConnection$IrX0 = MetaAdapterFactory.getReferenceLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1e674eba2c398dc1L, 0x1e674eba2c398dc2L, "rightPointConnection");
    /*package*/ static final SReferenceLink roadReference$FS6w = MetaAdapterFactory.getReferenceLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1269a46804c1fb06L, 0x1269a46804c1fb07L, "roadReference");
    /*package*/ static final SReferenceLink leftPointConnect$Vlnw = MetaAdapterFactory.getReferenceLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x13e8a493a7663348L, 0x13e8a493a7663349L, "leftPointConnect");
  }
}
