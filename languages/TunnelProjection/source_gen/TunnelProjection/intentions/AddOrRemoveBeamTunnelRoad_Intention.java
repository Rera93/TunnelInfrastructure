package TunnelProjection.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public final class AddOrRemoveBeamTunnelRoad_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddOrRemoveBeamTunnelRoad_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:2b869ca2-ccf5-4cfa-ac42-87fb5d120400(TunnelProjection.intentions)", "3321041496540071693"));
  }
  @Override
  public String getPresentation() {
    return "AddOrRemoveBeamTunnelRoad";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      if ((SLinkOperations.getTarget(node, LINKS.hasBeam$jja$) == null)) {
        return "Add Beam";
      } else {
        return "Remove Beam";
      }
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if ((SLinkOperations.getTarget(node, LINKS.hasBeam$jja$) == null)) {
        SLinkOperations.setNewChild(node, LINKS.hasBeam$jja$, CONCEPTS.Beam$6N);
      } else {
        SNodeOperations.deleteNode(SLinkOperations.getTarget(node, LINKS.hasBeam$jja$));
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddOrRemoveBeamTunnelRoad_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink hasBeam$jja$ = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b0eb01L, 0x261858895ff68231L, "hasBeam");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Beam$6N = MetaAdapterFactory.getConcept(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895fee0a81L, "TunnelProjection.structure.Beam");
  }
}
