package TunnelProjection.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class ChangeSemaphoreLightForTunnelRoad_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  public ChangeSemaphoreLightForTunnelRoad_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:2b869ca2-ccf5-4cfa-ac42-87fb5d120400(TunnelProjection.intentions)", "3321041496537887986"));
  }
  @Override
  public String getPresentation() {
    return "ChangeSemaphoreLightForTunnelRoad";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF) != null);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SEnumerationLiteral> paramList = parameter(node, context);
    if (paramList != null) {
      for (SEnumerationLiteral param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SEnumerationLiteral> parameter(final SNode node, final EditorContext editorContext) {
    if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF), PROPS.currentLight$jETz), 0x261858895ffc2fe7L)) {
      return ListSequence.fromListAndArray(new ArrayList<SEnumerationLiteral>(), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2fe8L, "Orange"), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2febL, "Red"));
    } else if (SEnumOperations.isMember(SPropertyOperations.getEnum(SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF), PROPS.currentLight$jETz), 0x261858895ffc2fe8L)) {
      return ListSequence.fromListAndArray(new ArrayList<SEnumerationLiteral>(), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2fe7L, "Green"), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2febL, "Red"));
    } else {
      return ListSequence.fromListAndArray(new ArrayList<SEnumerationLiteral>(), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2fe7L, "Green"), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, "TunnelProjection.structure.SemaphoreLights"), 0x261858895ffc2fe8L, "Orange"));
    }
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SEnumerationLiteral myParameter;
    public IntentionImplementation(SEnumerationLiteral parameter) {
      myParameter = parameter;
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Turn Semaphore Light " + myParameter;
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      switch (enumSwitchIndex_6txpbi_a0a0d7.indexNullable(myParameter)) {
        case 0:
          SPropertyOperations.setEnum(SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF), PROPS.currentLight$jETz, 0x261858895ffc2fe7L, "Green");
          break;
        case 1:
          SPropertyOperations.setEnum(SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF), PROPS.currentLight$jETz, 0x261858895ffc2fe8L, "Orange");
          break;
        case 2:
          SPropertyOperations.setEnum(SLinkOperations.getTarget(node, LINKS.hasSemaphore$jjmF), PROPS.currentLight$jETz, 0x261858895ffc2febL, "Red");
          break;
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ChangeSemaphoreLightForTunnelRoad_Intention.this;
    }
    public Object getParameter() {
      return myParameter;
    }
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex_6txpbi_a0a0d7 = EnumerationLiteralsIndex.build(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895ffc2fe6L, 0x261858895ffc2fe7L, 0x261858895ffc2fe8L, 0x261858895ffc2febL);

  private static final class LINKS {
    /*package*/ static final SContainmentLink hasSemaphore$jjmF = MetaAdapterFactory.getContainmentLink(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x1181c13235b0eb01L, 0x261858895ff68235L, "hasSemaphore");
  }

  private static final class PROPS {
    /*package*/ static final SProperty currentLight$jETz = MetaAdapterFactory.getProperty(0x72c81d76425049a4L, 0x8dfa274e9e7a2b19L, 0x261858895fee0a7eL, 0x261858895ffc2fefL, "currentLight");
  }
}
